// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`generate a basic model 1`] = `
"import type { CombinedInstructions } from "blade-compiler";
import type { ResultRecord } from "blade-syntax/queries";
interface ReducedFunction {
    /** @deprecated */
    apply: string;
    /** @deprecated */
    arguments: string;
    /** @deprecated */
    bind: string;
    /** @deprecated */
    call: string;
    /** @deprecated */
    caller: string;
    /** @deprecated */
    length: string;
    /** @deprecated */
    name: string;
    /** @deprecated */
    prototype: string;
    /** @deprecated */
    toString: string;
    /** @deprecated */
    unify: string;
}
export type Account = import("blade/types").Account;
export type Accounts = import("blade/types").Accounts;
declare module "blade/types" {
    export type Account = ResultRecord & {
        email: string;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
}
declare module "blade/server/hooks" {
    declare const use: {
        /* Get a single account record */
        account: ReducedFunction & {
            <T = Account | null>(options?: Partial<CombinedInstructions>): T;
            after: <T = Account | null>(value: CombinedInstructions["after"]) => T;
            before: <T = Account | null>(value: CombinedInstructions["before"]) => T;
            including: <T = Account | null>(value: CombinedInstructions["including"]) => T;
            limitedTo: <T = Account | null>(value: CombinedInstructions["limitedTo"]) => T;
            orderedBy: <T = Account | null>(value: CombinedInstructions["orderedBy"]) => T;
            selecting: <T = Account | null>(value: CombinedInstructions["selecting"]) => T;
            using: <T = Account | null>(value: CombinedInstructions["using"]) => T;
            with: {
                <T = Account | null>(options: CombinedInstructions["with"]): T;
                id: <T = Account | null>(value: ResultRecord["id"]) => T;
                "ronin.createdAt": <T = Account | null>(value: ResultRecord["ronin"]["createdAt"]) => T;
                "ronin.createdBy": <T = Account | null>(value: ResultRecord["ronin"]["createdBy"]) => T;
                "ronin.updatedAt": <T = Account | null>(value: ResultRecord["ronin"]["updatedAt"]) => T;
                "ronin.updatedBy": <T = Account | null>(value: ResultRecord["ronin"]["updatedBy"]) => T;
                name: <T = Account | null>(value: string) => T;
                email: <T = Account | null>(value: string) => T;
            };
        };
        /* Get multiple account records */
        accounts: ReducedFunction & {
            <T = Accounts>(options?: Partial<CombinedInstructions>): T;
            after: <T = Accounts>(value: CombinedInstructions["after"]) => T;
            before: <T = Accounts>(value: CombinedInstructions["before"]) => T;
            including: <T = Accounts>(value: CombinedInstructions["including"]) => T;
            limitedTo: <T = Accounts>(value: CombinedInstructions["limitedTo"]) => T;
            orderedBy: <T = Accounts>(value: CombinedInstructions["orderedBy"]) => T;
            selecting: <T = Accounts>(value: CombinedInstructions["selecting"]) => T;
            using: <T = Accounts>(value: CombinedInstructions["using"]) => T;
            with: {
                <T = Accounts>(options: CombinedInstructions["with"]): T;
                id: <T = Accounts>(value: ResultRecord["id"]) => T;
                "ronin.createdAt": <T = Accounts>(value: ResultRecord["ronin"]["createdAt"]) => T;
                "ronin.createdBy": <T = Accounts>(value: ResultRecord["ronin"]["createdBy"]) => T;
                "ronin.updatedAt": <T = Accounts>(value: ResultRecord["ronin"]["updatedAt"]) => T;
                "ronin.updatedBy": <T = Accounts>(value: ResultRecord["ronin"]["updatedBy"]) => T;
                name: <T = Accounts>(value: string) => T;
                email: <T = Accounts>(value: string) => T;
            };
        };
    };
}
"
`;

exports[`generate a basic model with blob field 1`] = `
"import type { CombinedInstructions } from "blade-compiler";
import type { ResultRecord } from "blade-syntax/queries";
interface ReducedFunction {
    /** @deprecated */
    apply: string;
    /** @deprecated */
    arguments: string;
    /** @deprecated */
    bind: string;
    /** @deprecated */
    call: string;
    /** @deprecated */
    caller: string;
    /** @deprecated */
    length: string;
    /** @deprecated */
    name: string;
    /** @deprecated */
    prototype: string;
    /** @deprecated */
    toString: string;
    /** @deprecated */
    unify: string;
}
import type { StoredObject } from "blade-compiler";
export type Account = import("blade/types").Account;
export type Accounts = import("blade/types").Accounts;
declare module "blade/types" {
    export type Account = ResultRecord & {
        email: string;
        image: StoredObject;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
}
declare module "blade/server/hooks" {
    declare const use: {
        /* Get a single account record */
        account: ReducedFunction & {
            <T = Account | null>(options?: Partial<CombinedInstructions>): T;
            after: <T = Account | null>(value: CombinedInstructions["after"]) => T;
            before: <T = Account | null>(value: CombinedInstructions["before"]) => T;
            including: <T = Account | null>(value: CombinedInstructions["including"]) => T;
            limitedTo: <T = Account | null>(value: CombinedInstructions["limitedTo"]) => T;
            orderedBy: <T = Account | null>(value: CombinedInstructions["orderedBy"]) => T;
            selecting: <T = Account | null>(value: CombinedInstructions["selecting"]) => T;
            using: <T = Account | null>(value: CombinedInstructions["using"]) => T;
            with: {
                <T = Account | null>(options: CombinedInstructions["with"]): T;
                id: <T = Account | null>(value: ResultRecord["id"]) => T;
                "ronin.createdAt": <T = Account | null>(value: ResultRecord["ronin"]["createdAt"]) => T;
                "ronin.createdBy": <T = Account | null>(value: ResultRecord["ronin"]["createdBy"]) => T;
                "ronin.updatedAt": <T = Account | null>(value: ResultRecord["ronin"]["updatedAt"]) => T;
                "ronin.updatedBy": <T = Account | null>(value: ResultRecord["ronin"]["updatedBy"]) => T;
                name: <T = Account | null>(value: string) => T;
                email: <T = Account | null>(value: string) => T;
                image: <T = Account | null>(value: StoredObject) => T;
            };
        };
        /* Get multiple account records */
        accounts: ReducedFunction & {
            <T = Accounts>(options?: Partial<CombinedInstructions>): T;
            after: <T = Accounts>(value: CombinedInstructions["after"]) => T;
            before: <T = Accounts>(value: CombinedInstructions["before"]) => T;
            including: <T = Accounts>(value: CombinedInstructions["including"]) => T;
            limitedTo: <T = Accounts>(value: CombinedInstructions["limitedTo"]) => T;
            orderedBy: <T = Accounts>(value: CombinedInstructions["orderedBy"]) => T;
            selecting: <T = Accounts>(value: CombinedInstructions["selecting"]) => T;
            using: <T = Accounts>(value: CombinedInstructions["using"]) => T;
            with: {
                <T = Accounts>(options: CombinedInstructions["with"]): T;
                id: <T = Accounts>(value: ResultRecord["id"]) => T;
                "ronin.createdAt": <T = Accounts>(value: ResultRecord["ronin"]["createdAt"]) => T;
                "ronin.createdBy": <T = Accounts>(value: ResultRecord["ronin"]["createdBy"]) => T;
                "ronin.updatedAt": <T = Accounts>(value: ResultRecord["ronin"]["updatedAt"]) => T;
                "ronin.updatedBy": <T = Accounts>(value: ResultRecord["ronin"]["updatedBy"]) => T;
                name: <T = Accounts>(value: string) => T;
                email: <T = Accounts>(value: string) => T;
                image: <T = Accounts>(value: StoredObject) => T;
            };
        };
    };
}
"
`;

exports[`generate with no models 1`] = `
"import type { CombinedInstructions } from "blade-compiler";
import type { ResultRecord } from "blade-syntax/queries";
interface ReducedFunction {
    /** @deprecated */
    apply: string;
    /** @deprecated */
    arguments: string;
    /** @deprecated */
    bind: string;
    /** @deprecated */
    call: string;
    /** @deprecated */
    caller: string;
    /** @deprecated */
    length: string;
    /** @deprecated */
    name: string;
    /** @deprecated */
    prototype: string;
    /** @deprecated */
    toString: string;
    /** @deprecated */
    unify: string;
}
declare module "blade/types" { }
declare module "blade/server/hooks" {
    declare const use: {};
}
"
`;
