// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`generate a basic model 1`] = `
"import type { CombinedInstructions, Expression, GetQuery } from "blade-compiler";
import type { ReducedFunction, ResultRecord } from "blade-syntax/queries";
export type Account = import("blade/types").Account;
export type Accounts = import("blade/types").Accounts;
type AccountFieldSlug = "id" | "ronin.createdAt" | "ronin.createdBy" | "ronin.updatedAt" | "ronin.updatedBy" | "name" | "email";
type AccountSyntax<S, Q> = ReducedFunction & {
    <T = S>(options?: Partial<Q>): T;
    after: ReducedFunction & (<T = S>(value: CombinedInstructions["after"]) => T);
    before: ReducedFunction & (<T = S>(value: CombinedInstructions["before"]) => T);
    including: ReducedFunction & (<T = S>(value: CombinedInstructions["including"]) => T);
    limitedTo: ReducedFunction & (<T = S>(value: CombinedInstructions["limitedTo"]) => T);
    orderedBy: ReducedFunction & (<T = S>(options: {
        ascending?: Array<Expression | AccountFieldSlug>;
        descending?: Array<Expression | AccountFieldSlug>;
    }) => T) & {
        ascending: <T = S>(fields: Array<Expression | AccountFieldSlug>) => T;
        descending: <T = S>(fields: Array<Expression | AccountFieldSlug>) => T;
    };
    selecting: ReducedFunction & (<T = S>(options: Array<AccountFieldSlug>) => T);
    using: ReducedFunction & (<T = S>(value: CombinedInstructions["using"]) => T);
    with: ReducedFunction & {
        <T = S>(options: CombinedInstructions["with"]): T;
        id: <T = S>(value: ResultRecord["id"]) => T;
        ronin: ReducedFunction & {
            createdAt: <T = S>(value: ResultRecord["ronin"]["createdAt"]) => T;
            createdBy: <T = S>(value: ResultRecord["ronin"]["createdBy"]) => T;
            updatedAt: <T = S>(value: ResultRecord["ronin"]["updatedAt"]) => T;
            updatedBy: <T = S>(value: ResultRecord["ronin"]["updatedBy"]) => T;
        };
        name: <T = S>(value: string) => T;
        email: <T = S>(value: string) => T;
    };
};
declare module "blade/types" {
    export type Account = ResultRecord & {
        email: string;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
}
declare module "blade/server/hooks" {
    declare const use: {
        /** Get a single account record */
        account: AccountSyntax<Account | null, GetQuery[keyof GetQuery]>;
        /** Get multiple account records */
        accounts: AccountSyntax<Accounts, GetQuery[keyof GetQuery]>;
    };
}
"
`;

exports[`generate a basic model with blob field 1`] = `
"import type { CombinedInstructions, Expression, GetQuery } from "blade-compiler";
import type { ReducedFunction, ResultRecord } from "blade-syntax/queries";
import type { StoredObject } from "blade-compiler";
export type Account = import("blade/types").Account;
export type Accounts = import("blade/types").Accounts;
type AccountFieldSlug = "id" | "ronin.createdAt" | "ronin.createdBy" | "ronin.updatedAt" | "ronin.updatedBy" | "name" | "email" | "image";
type AccountSyntax<S, Q> = ReducedFunction & {
    <T = S>(options?: Partial<Q>): T;
    after: ReducedFunction & (<T = S>(value: CombinedInstructions["after"]) => T);
    before: ReducedFunction & (<T = S>(value: CombinedInstructions["before"]) => T);
    including: ReducedFunction & (<T = S>(value: CombinedInstructions["including"]) => T);
    limitedTo: ReducedFunction & (<T = S>(value: CombinedInstructions["limitedTo"]) => T);
    orderedBy: ReducedFunction & (<T = S>(options: {
        ascending?: Array<Expression | AccountFieldSlug>;
        descending?: Array<Expression | AccountFieldSlug>;
    }) => T) & {
        ascending: <T = S>(fields: Array<Expression | AccountFieldSlug>) => T;
        descending: <T = S>(fields: Array<Expression | AccountFieldSlug>) => T;
    };
    selecting: ReducedFunction & (<T = S>(options: Array<AccountFieldSlug>) => T);
    using: ReducedFunction & (<T = S>(value: CombinedInstructions["using"]) => T);
    with: ReducedFunction & {
        <T = S>(options: CombinedInstructions["with"]): T;
        id: <T = S>(value: ResultRecord["id"]) => T;
        ronin: ReducedFunction & {
            createdAt: <T = S>(value: ResultRecord["ronin"]["createdAt"]) => T;
            createdBy: <T = S>(value: ResultRecord["ronin"]["createdBy"]) => T;
            updatedAt: <T = S>(value: ResultRecord["ronin"]["updatedAt"]) => T;
            updatedBy: <T = S>(value: ResultRecord["ronin"]["updatedBy"]) => T;
        };
        name: <T = S>(value: string) => T;
        email: <T = S>(value: string) => T;
        image: <T = S>(value: StoredObject) => T;
    };
};
declare module "blade/types" {
    export type Account = ResultRecord & {
        email: string;
        image: StoredObject;
        name: string;
    };
    export type Accounts = Array<Account> & {
        moreBefore?: string;
        moreAfter?: string;
    };
}
declare module "blade/server/hooks" {
    declare const use: {
        /** Get a single account record */
        account: AccountSyntax<Account | null, GetQuery[keyof GetQuery]>;
        /** Get multiple account records */
        accounts: AccountSyntax<Accounts, GetQuery[keyof GetQuery]>;
    };
}
"
`;

exports[`generate with no models 1`] = `
"import type { CombinedInstructions, Expression, GetQuery } from "blade-compiler";
import type { ReducedFunction, ResultRecord } from "blade-syntax/queries";
declare module "blade/types" { }
declare module "blade/server/hooks" {
    declare const use: {};
}
"
`;
