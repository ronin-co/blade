// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`generate a basic model 1`] = `
"import type { AddQuery, CountQuery, GetQuery, ListQuery, Model, RemoveQuery, SetQuery } from "blade-compiler";
import type { DeepCallable, ResultRecord } from "blade-syntax/queries";
import type { PromiseTuple, QueryHandlerOptions } from "ronin/types";
interface ReducedFunction {
    /*@deprecated*/
    apply: string;
    /*@deprecated*/
    arguments: string;
    /*@deprecated*/
    bind: string;
    /*@deprecated*/
    call: string;
    /*@deprecated*/
    caller: string;
    /*@deprecated*/
    length: string;
    /*@deprecated*/
    name: string;
    /*@deprecated*/
    prototype: string;
    /*@deprecated*/
    toString: string;
    /*@deprecated*/
    unify: string;
}
export type Account = ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
declare module "blade/types" {
    export type { Account, Accounts };
}
declare module "blade/server/hooks" {
    declare const use: {
        /* Get a single account record */
        account: DeepCallable<GetQuery[keyof GetQuery], Account | null>;
        /* Get multiple account records */
        accounts: DeepCallable<GetQuery[keyof GetQuery], Accounts>;
    };
}
"
`;

exports[`generate a basic model with blob field 1`] = `
"import type { AddQuery, CountQuery, GetQuery, ListQuery, Model, RemoveQuery, SetQuery } from "blade-compiler";
import type { StoredObject } from "blade-compiler";
import type { DeepCallable, ResultRecord } from "blade-syntax/queries";
import type { PromiseTuple, QueryHandlerOptions } from "ronin/types";
interface ReducedFunction {
    /*@deprecated*/
    apply: string;
    /*@deprecated*/
    arguments: string;
    /*@deprecated*/
    bind: string;
    /*@deprecated*/
    call: string;
    /*@deprecated*/
    caller: string;
    /*@deprecated*/
    length: string;
    /*@deprecated*/
    name: string;
    /*@deprecated*/
    prototype: string;
    /*@deprecated*/
    toString: string;
    /*@deprecated*/
    unify: string;
}
export type Account = ResultRecord & {
    email: string;
    image: StoredObject;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
declare module "blade/types" {
    export type { Account, Accounts };
}
declare module "blade/server/hooks" {
    declare const use: {
        /* Get a single account record */
        account: DeepCallable<GetQuery[keyof GetQuery], Account | null>;
        /* Get multiple account records */
        accounts: DeepCallable<GetQuery[keyof GetQuery], Accounts>;
    };
}
"
`;

exports[`generate with no models 1`] = `
"import type { AddQuery, CountQuery, GetQuery, ListQuery, Model, RemoveQuery, SetQuery } from "blade-compiler";
import type { DeepCallable, ResultRecord } from "blade-syntax/queries";
import type { PromiseTuple, QueryHandlerOptions } from "ronin/types";
interface ReducedFunction {
    /*@deprecated*/
    apply: string;
    /*@deprecated*/
    arguments: string;
    /*@deprecated*/
    bind: string;
    /*@deprecated*/
    call: string;
    /*@deprecated*/
    caller: string;
    /*@deprecated*/
    length: string;
    /*@deprecated*/
    name: string;
    /*@deprecated*/
    prototype: string;
    /*@deprecated*/
    toString: string;
    /*@deprecated*/
    unify: string;
}
declare module "blade/types" {
    export type {};
}
declare module "blade/server/hooks" {
    declare const use: {};
}
"
`;
