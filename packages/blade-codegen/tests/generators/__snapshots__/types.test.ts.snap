// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`types generate the core model types a basic model 1`] = `
"export type Account = ResultRecord & {
    avatar: StoredObject;
    email: string;
    isActive: boolean;
    lastActiveAt: Date;
    name: string;
    rewardPoints: number;
    settings: (JsonObject | JsonArray);
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with a summary 1`] = `
"/**
 * A user account.
 */
export type Account = ResultRecord & {
    email: string;
    name: string;
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with an invalid field type 1`] = `
"export type Account = ResultRecord & {
    name: unknown;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with a link field 1`] = `
"export type Account = ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Post<U extends Array<"author"> | "all" = [
]> = ResultRecord & {
    author: ResolveSchema<Account, U, "author">;
    title: string;
};
export type Posts<U extends Array<"author"> | "all" = [
]> = Array<Post<U>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with a many-to-many link field 1`] = `
"export type Account = ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Space<U extends Array<"members"> | "all" = [
]> = ResultRecord & {
    members: ResolveSchema<Array<Account>, U, "members">;
    name: string;
};
export type Spaces<U extends Array<"members"> | "all" = [
]> = Array<Space<U>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with a link field that does not exist 1`] = `
"export type Account = ResultRecord & {
    email: string;
    latestPost: unknown;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types generate the core model types a model with nested fields 1`] = `
"/**
 * A user account.
 */
export type Account = ResultRecord & {
    name: string;
    nested: {
        bar: number;
        foo: string;
    };
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`types syntax generate root query call signature a basic model 1`] = `
"<T = Account>(instructions?: Partial<CombinedInstructions>, options?: Record<string, unknown>): T;
"
`;

exports[`types syntax generate \`default\` syntax property a basic model 1`] = `
"including: ReducedFunction & (<T = Account>(value: CombinedInstructions["including"]) => T);
"
`;

exports[`types syntax generate \`orderedBy\` syntax property a basic model 1`] = `
"orderedBy: ReducedFunction & (<T = account>(options: {
    ascending?: Array<Expression | AccountFieldSlug>;
    descending?: Array<Expression | AccountFieldSlug>;
}) => T) & {
    ascending: <T = account>(fields: Array<Expression | AccountFieldSlug>) => T;
    descending: <T = account>(fields: Array<Expression | AccountFieldSlug>) => T;
};
"
`;

exports[`types syntax generate \`selecting\` syntax property a basic model 1`] = `
"selecting: ReducedFunction & (<T = account>(options: Array<AccountFieldSlug>) => T);
"
`;

exports[`types syntax generate \`using\` syntax property a basic model 1`] = `
"using: ReducedFunction & {
    <U extends Array<"author"> | "all">(fields: U): post<U> | null;
    <T = Post>(fields: Array<"author"> | "all"): T;
};
using: ReducedFunction & {
    <U extends Array<"author"> | "all">(fields: U): Promise<post<U>>;
    <T = Post>(fields: Array<"author"> | "all"): Promise<T>;
};
"
`;

exports[`types syntax generate \`using\` syntax property a basic model with no link fields 1`] = `
"using: ReducedFunction & (<T = Account>(value: CombinedInstructions["using"]) => T);
using: ReducedFunction & (<T = Account>(value: CombinedInstructions["using"]) => T);
"
`;

exports[`types syntax generate \`with\` syntax property a basic model 1`] = `
"with: ReducedFunction & {
    <T = Account>(instructions: CombinedInstructions["with"], options?: Record<string, unknown>): T;
    id: <T = Account>(value: ResultRecord["id"]) => T;
    ronin: ReducedFunction & {
        createdAt: <T = Account>(value: ResultRecord["ronin"]["createdAt"]) => T;
        createdBy: <T = Account>(value: ResultRecord["ronin"]["createdBy"]) => T;
        updatedAt: <T = Account>(value: ResultRecord["ronin"]["updatedAt"]) => T;
        updatedBy: <T = Account>(value: ResultRecord["ronin"]["updatedBy"]) => T;
    };
    avatar: <T = Account>(avatar: Account["avatar"]) => T;
    email: <T = Account>(email: Account["email"]) => T;
    isActive: <T = Account>(isActive: Account["isActive"]) => T;
    lastActiveAt: <T = Account>(lastActiveAt: Account["lastActiveAt"]) => T;
    name: <T = Account>(name: Account["name"]) => T;
    rewardPoints: <T = Account>(rewardPoints: Account["rewardPoints"]) => T;
    settings: <T = Account>(settings: Account["settings"]) => T;
};
"
`;
