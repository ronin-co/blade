// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`namespaces with a basic model 1`] = `
"type AddQuery = {
    /** Add a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Add multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
};
type GetQuery = {
    /** Get a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCaller & {
        after: Syntax.Account.Singular.AfterQuery;
        before: Syntax.Account.Singular.BeforeQuery;
        including: Syntax.Account.Singular.IncludingQuery;
        limitedTo: Syntax.Account.Singular.LimitedToQuery;
        orderedBy: Syntax.Account.Singular.OrderedByQuery;
        selecting: Syntax.Account.Singular.SelectingQuery;
        using: Syntax.Account.Singular.UsingQuery;
        with: Syntax.Account.Singular.WithQuery;
    };
    /** Get multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCaller & {
        after: Syntax.Account.Plural.AfterQuery;
        before: Syntax.Account.Plural.BeforeQuery;
        including: Syntax.Account.Plural.IncludingQuery;
        limitedTo: Syntax.Account.Plural.LimitedToQuery;
        orderedBy: Syntax.Account.Plural.OrderedByQuery;
        selecting: Syntax.Account.Plural.SelectingQuery;
        using: Syntax.Account.Plural.UsingQuery;
        with: Syntax.Account.Plural.WithQuery;
    };
};
type RemoveQuery = {
    /** Remove a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Remove multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
};
type SetQuery = {
    /** Set a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Set multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
};
namespace Account {
    type FieldSlug = "id" | "ronin.createdAt" | "ronin.createdBy" | "ronin.updatedAt" | "ronin.updatedBy" | "avatar" | "email" | "isActive" | "lastActiveAt" | "name" | "rewardPoints" | "settings";
    namespace Singular {
        type AfterQuery = Utils.AfterQuery<Account | null>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Account | null>;
        type BeforeQuery = Utils.BeforeQuery<Account | null>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Account | null>;
        type IncludingQuery = Utils.IncludingQuery<Account | null>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Account | null>;
        type LimitedToQuery = Utils.LimitedToQuery<Account | null>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Account | null>;
        type OrderedByQuery = Utils.OrderedByQuery<Account | null, Account.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Account | null, Account.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Account | null>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Account | null>;
        type SelectingQuery = Utils.SelectingQuery<Account | null, Account.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Account | null, Account.FieldSlug>;
        type ToQuery = Utils.ToQuery<Account | null, Account>;
        type ToQueryPromise = Utils.ToQueryPromise<Account | null, Account>;
        type UsingQuery = ReducedFunction & (<T = Account | null>(value: CombinedInstructions["using"]) => T);
        type UsingQueryPromise = ReducedFunction & (<T = Account | null>(value: CombinedInstructions["using"]) => Promise<T>);
        type WithQuery = Utils.WithQuery<Account | null, Account> & {
            avatar: <T = Account | null>(avatar: Account["avatar"], options?: Record<string, unknown>) => T;
            email: <T = Account | null>(email: Account["email"], options?: Record<string, unknown>) => T;
            isActive: <T = Account | null>(isActive: Account["isActive"], options?: Record<string, unknown>) => T;
            lastActiveAt: <T = Account | null>(lastActiveAt: Account["lastActiveAt"], options?: Record<string, unknown>) => T;
            name: <T = Account | null>(name: Account["name"], options?: Record<string, unknown>) => T;
            rewardPoints: <T = Account | null>(rewardPoints: Account["rewardPoints"], options?: Record<string, unknown>) => T;
            settings: <T = Account | null>(settings: Account["settings"], options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Account | null, Account> & {
            avatar: <T = Account | null>(avatar: Account["avatar"], options?: Record<string, unknown>) => Promise<T>;
            email: <T = Account | null>(email: Account["email"], options?: Record<string, unknown>) => Promise<T>;
            isActive: <T = Account | null>(isActive: Account["isActive"], options?: Record<string, unknown>) => Promise<T>;
            lastActiveAt: <T = Account | null>(lastActiveAt: Account["lastActiveAt"], options?: Record<string, unknown>) => Promise<T>;
            name: <T = Account | null>(name: Account["name"], options?: Record<string, unknown>) => Promise<T>;
            rewardPoints: <T = Account | null>(rewardPoints: Account["rewardPoints"], options?: Record<string, unknown>) => Promise<T>;
            settings: <T = Account | null>(settings: Account["settings"], options?: Record<string, unknown>) => Promise<T>;
        };
    }
    namespace Plural {
        type AfterQuery = Utils.AfterQuery<Accounts>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Accounts>;
        type BeforeQuery = Utils.BeforeQuery<Accounts>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Accounts>;
        type IncludingQuery = Utils.IncludingQuery<Accounts>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Accounts>;
        type LimitedToQuery = Utils.LimitedToQuery<Accounts>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Accounts>;
        type OrderedByQuery = Utils.OrderedByQuery<Accounts, Account.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Accounts, Account.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Accounts>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Accounts>;
        type SelectingQuery = Utils.SelectingQuery<Accounts, Account.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Accounts, Account.FieldSlug>;
        type ToQuery = Utils.ToQuery<Accounts, Account>;
        type ToQueryPromise = Utils.ToQueryPromise<Accounts, Account>;
        type UsingQuery = ReducedFunction & (<T = Accounts>(value: CombinedInstructions["using"]) => T);
        type UsingQueryPromise = ReducedFunction & (<T = Accounts>(value: CombinedInstructions["using"]) => Promise<T>);
        type WithQuery = Utils.WithQuery<Accounts, Account> & {
            avatar: <T = Accounts>(avatar: Account["avatar"], options?: Record<string, unknown>) => T;
            email: <T = Accounts>(email: Account["email"], options?: Record<string, unknown>) => T;
            isActive: <T = Accounts>(isActive: Account["isActive"], options?: Record<string, unknown>) => T;
            lastActiveAt: <T = Accounts>(lastActiveAt: Account["lastActiveAt"], options?: Record<string, unknown>) => T;
            name: <T = Accounts>(name: Account["name"], options?: Record<string, unknown>) => T;
            rewardPoints: <T = Accounts>(rewardPoints: Account["rewardPoints"], options?: Record<string, unknown>) => T;
            settings: <T = Accounts>(settings: Account["settings"], options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Accounts, Account> & {
            avatar: <T = Accounts>(avatar: Account["avatar"], options?: Record<string, unknown>) => Promise<T>;
            email: <T = Accounts>(email: Account["email"], options?: Record<string, unknown>) => Promise<T>;
            isActive: <T = Accounts>(isActive: Account["isActive"], options?: Record<string, unknown>) => Promise<T>;
            lastActiveAt: <T = Accounts>(lastActiveAt: Account["lastActiveAt"], options?: Record<string, unknown>) => Promise<T>;
            name: <T = Accounts>(name: Account["name"], options?: Record<string, unknown>) => Promise<T>;
            rewardPoints: <T = Accounts>(rewardPoints: Account["rewardPoints"], options?: Record<string, unknown>) => Promise<T>;
            settings: <T = Accounts>(settings: Account["settings"], options?: Record<string, unknown>) => Promise<T>;
        };
    }
}
"
`;

exports[`namespaces with a link field 1`] = `
"type AddQuery = {
    /** Add a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Add multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
    /** Add a single post record */
    post: ReducedFunction & Syntax.Post.Singular.RootQueryCallerPromise & {
        after: Syntax.Post.Singular.AfterQueryPromise;
        before: Syntax.Post.Singular.BeforeQueryPromise;
        including: Syntax.Post.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Post.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Singular.OrderedByQueryPromise;
        selecting: Syntax.Post.Singular.SelectingQueryPromise;
        to: Syntax.Post.Singular.ToQueryPromise;
        using: Syntax.Post.Singular.UsingQueryPromise;
        with: Syntax.Post.Singular.WithQueryPromise;
    };
    /** Add multiple post records */
    posts: ReducedFunction & Syntax.Post.Plural.RootQueryCallerPromise & {
        after: Syntax.Post.Plural.AfterQueryPromise;
        before: Syntax.Post.Plural.BeforeQueryPromise;
        including: Syntax.Post.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Post.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Plural.OrderedByQueryPromise;
        selecting: Syntax.Post.Plural.SelectingQueryPromise;
        to: Syntax.Post.Plural.ToQueryPromise;
        using: Syntax.Post.Plural.UsingQueryPromise;
        with: Syntax.Post.Plural.WithQueryPromise;
    };
};
type GetQuery = {
    /** Get a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCaller & {
        after: Syntax.Account.Singular.AfterQuery;
        before: Syntax.Account.Singular.BeforeQuery;
        including: Syntax.Account.Singular.IncludingQuery;
        limitedTo: Syntax.Account.Singular.LimitedToQuery;
        orderedBy: Syntax.Account.Singular.OrderedByQuery;
        selecting: Syntax.Account.Singular.SelectingQuery;
        using: Syntax.Account.Singular.UsingQuery;
        with: Syntax.Account.Singular.WithQuery;
    };
    /** Get multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCaller & {
        after: Syntax.Account.Plural.AfterQuery;
        before: Syntax.Account.Plural.BeforeQuery;
        including: Syntax.Account.Plural.IncludingQuery;
        limitedTo: Syntax.Account.Plural.LimitedToQuery;
        orderedBy: Syntax.Account.Plural.OrderedByQuery;
        selecting: Syntax.Account.Plural.SelectingQuery;
        using: Syntax.Account.Plural.UsingQuery;
        with: Syntax.Account.Plural.WithQuery;
    };
    /** Get a single post record */
    post: ReducedFunction & Syntax.Post.Singular.RootQueryCaller & {
        after: Syntax.Post.Singular.AfterQuery;
        before: Syntax.Post.Singular.BeforeQuery;
        including: Syntax.Post.Singular.IncludingQuery;
        limitedTo: Syntax.Post.Singular.LimitedToQuery;
        orderedBy: Syntax.Post.Singular.OrderedByQuery;
        selecting: Syntax.Post.Singular.SelectingQuery;
        using: Syntax.Post.Singular.UsingQuery;
        with: Syntax.Post.Singular.WithQuery;
    };
    /** Get multiple post records */
    posts: ReducedFunction & Syntax.Post.Plural.RootQueryCaller & {
        after: Syntax.Post.Plural.AfterQuery;
        before: Syntax.Post.Plural.BeforeQuery;
        including: Syntax.Post.Plural.IncludingQuery;
        limitedTo: Syntax.Post.Plural.LimitedToQuery;
        orderedBy: Syntax.Post.Plural.OrderedByQuery;
        selecting: Syntax.Post.Plural.SelectingQuery;
        using: Syntax.Post.Plural.UsingQuery;
        with: Syntax.Post.Plural.WithQuery;
    };
};
type RemoveQuery = {
    /** Remove a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Remove multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
    /** Remove a single post record */
    post: ReducedFunction & Syntax.Post.Singular.RootQueryCallerPromise & {
        after: Syntax.Post.Singular.AfterQueryPromise;
        before: Syntax.Post.Singular.BeforeQueryPromise;
        including: Syntax.Post.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Post.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Singular.OrderedByQueryPromise;
        selecting: Syntax.Post.Singular.SelectingQueryPromise;
        to: Syntax.Post.Singular.ToQueryPromise;
        using: Syntax.Post.Singular.UsingQueryPromise;
        with: Syntax.Post.Singular.WithQueryPromise;
    };
    /** Remove multiple post records */
    posts: ReducedFunction & Syntax.Post.Plural.RootQueryCallerPromise & {
        after: Syntax.Post.Plural.AfterQueryPromise;
        before: Syntax.Post.Plural.BeforeQueryPromise;
        including: Syntax.Post.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Post.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Plural.OrderedByQueryPromise;
        selecting: Syntax.Post.Plural.SelectingQueryPromise;
        to: Syntax.Post.Plural.ToQueryPromise;
        using: Syntax.Post.Plural.UsingQueryPromise;
        with: Syntax.Post.Plural.WithQueryPromise;
    };
};
type SetQuery = {
    /** Set a single account record */
    account: ReducedFunction & Syntax.Account.Singular.RootQueryCallerPromise & {
        after: Syntax.Account.Singular.AfterQueryPromise;
        before: Syntax.Account.Singular.BeforeQueryPromise;
        including: Syntax.Account.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Account.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Singular.OrderedByQueryPromise;
        selecting: Syntax.Account.Singular.SelectingQueryPromise;
        to: Syntax.Account.Singular.ToQueryPromise;
        using: Syntax.Account.Singular.UsingQueryPromise;
        with: Syntax.Account.Singular.WithQueryPromise;
    };
    /** Set multiple account records */
    accounts: ReducedFunction & Syntax.Account.Plural.RootQueryCallerPromise & {
        after: Syntax.Account.Plural.AfterQueryPromise;
        before: Syntax.Account.Plural.BeforeQueryPromise;
        including: Syntax.Account.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Account.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Account.Plural.OrderedByQueryPromise;
        selecting: Syntax.Account.Plural.SelectingQueryPromise;
        to: Syntax.Account.Plural.ToQueryPromise;
        using: Syntax.Account.Plural.UsingQueryPromise;
        with: Syntax.Account.Plural.WithQueryPromise;
    };
    /** Set a single post record */
    post: ReducedFunction & Syntax.Post.Singular.RootQueryCallerPromise & {
        after: Syntax.Post.Singular.AfterQueryPromise;
        before: Syntax.Post.Singular.BeforeQueryPromise;
        including: Syntax.Post.Singular.IncludingQueryPromise;
        limitedTo: Syntax.Post.Singular.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Singular.OrderedByQueryPromise;
        selecting: Syntax.Post.Singular.SelectingQueryPromise;
        to: Syntax.Post.Singular.ToQueryPromise;
        using: Syntax.Post.Singular.UsingQueryPromise;
        with: Syntax.Post.Singular.WithQueryPromise;
    };
    /** Set multiple post records */
    posts: ReducedFunction & Syntax.Post.Plural.RootQueryCallerPromise & {
        after: Syntax.Post.Plural.AfterQueryPromise;
        before: Syntax.Post.Plural.BeforeQueryPromise;
        including: Syntax.Post.Plural.IncludingQueryPromise;
        limitedTo: Syntax.Post.Plural.LimitedToQueryPromise;
        orderedBy: Syntax.Post.Plural.OrderedByQueryPromise;
        selecting: Syntax.Post.Plural.SelectingQueryPromise;
        to: Syntax.Post.Plural.ToQueryPromise;
        using: Syntax.Post.Plural.UsingQueryPromise;
        with: Syntax.Post.Plural.WithQueryPromise;
    };
};
namespace Account {
    type FieldSlug = "id" | "ronin.createdAt" | "ronin.createdBy" | "ronin.updatedAt" | "ronin.updatedBy" | "name" | "email";
    namespace Singular {
        type AfterQuery = Utils.AfterQuery<Account | null>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Account | null>;
        type BeforeQuery = Utils.BeforeQuery<Account | null>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Account | null>;
        type IncludingQuery = Utils.IncludingQuery<Account | null>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Account | null>;
        type LimitedToQuery = Utils.LimitedToQuery<Account | null>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Account | null>;
        type OrderedByQuery = Utils.OrderedByQuery<Account | null, Account.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Account | null, Account.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Account | null>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Account | null>;
        type SelectingQuery = Utils.SelectingQuery<Account | null, Account.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Account | null, Account.FieldSlug>;
        type ToQuery = Utils.ToQuery<Account | null, Account>;
        type ToQueryPromise = Utils.ToQueryPromise<Account | null, Account>;
        type UsingQuery = ReducedFunction & (<T = Account | null>(value: CombinedInstructions["using"]) => T);
        type UsingQueryPromise = ReducedFunction & (<T = Account | null>(value: CombinedInstructions["using"]) => Promise<T>);
        type WithQuery = Utils.WithQuery<Account | null, Account> & {
            name: <T = Account | null>(name: Account["name"], options?: Record<string, unknown>) => T;
            email: <T = Account | null>(email: Account["email"], options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Account | null, Account> & {
            name: <T = Account | null>(name: Account["name"], options?: Record<string, unknown>) => Promise<T>;
            email: <T = Account | null>(email: Account["email"], options?: Record<string, unknown>) => Promise<T>;
        };
    }
    namespace Plural {
        type AfterQuery = Utils.AfterQuery<Accounts>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Accounts>;
        type BeforeQuery = Utils.BeforeQuery<Accounts>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Accounts>;
        type IncludingQuery = Utils.IncludingQuery<Accounts>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Accounts>;
        type LimitedToQuery = Utils.LimitedToQuery<Accounts>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Accounts>;
        type OrderedByQuery = Utils.OrderedByQuery<Accounts, Account.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Accounts, Account.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Accounts>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Accounts>;
        type SelectingQuery = Utils.SelectingQuery<Accounts, Account.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Accounts, Account.FieldSlug>;
        type ToQuery = Utils.ToQuery<Accounts, Account>;
        type ToQueryPromise = Utils.ToQueryPromise<Accounts, Account>;
        type UsingQuery = ReducedFunction & (<T = Accounts>(value: CombinedInstructions["using"]) => T);
        type UsingQueryPromise = ReducedFunction & (<T = Accounts>(value: CombinedInstructions["using"]) => Promise<T>);
        type WithQuery = Utils.WithQuery<Accounts, Account> & {
            name: <T = Accounts>(name: Account["name"], options?: Record<string, unknown>) => T;
            email: <T = Accounts>(email: Account["email"], options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Accounts, Account> & {
            name: <T = Accounts>(name: Account["name"], options?: Record<string, unknown>) => Promise<T>;
            email: <T = Accounts>(email: Account["email"], options?: Record<string, unknown>) => Promise<T>;
        };
    }
}
namespace Post {
    type FieldSlug = "id" | "ronin.createdAt" | "ronin.createdBy" | "ronin.updatedAt" | "ronin.updatedBy" | "title" | "author";
    namespace Singular {
        type AfterQuery = Utils.AfterQuery<Post | null>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Post | null>;
        type BeforeQuery = Utils.BeforeQuery<Post | null>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Post | null>;
        type IncludingQuery = Utils.IncludingQuery<Post | null>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Post | null>;
        type LimitedToQuery = Utils.LimitedToQuery<Post | null>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Post | null>;
        type OrderedByQuery = Utils.OrderedByQuery<Post | null, Post.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Post | null, Post.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Post | null>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Post | null>;
        type SelectingQuery = Utils.SelectingQuery<Post | null, Post.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Post | null, Post.FieldSlug>;
        type ToQuery = Utils.ToQuery<Post | null, Post>;
        type ToQueryPromise = Utils.ToQueryPromise<Post | null, Post>;
        type UsingQuery = ReducedFunction & {
            <U extends Array<"author"> | "all">(fields: U): Post<U> | null;
            <T = Post | null>(fields: Array<"author"> | "all"): T;
        };
        type UsingQueryPromise = ReducedFunction & {
            <U extends Array<"author"> | "all">(fields: U): Promise<Post<U>> | null;
            <T = Post | null>(fields: Array<"author"> | "all"): Promise<T>;
        };
        type WithQuery = Utils.WithQuery<Post | null, Post> & {
            title: <T = Post | null>(title: Post["title"], options?: Record<string, unknown>) => T;
            author: <T = Post | null>(author: Post["author"] | Partial<Post<[
                "author"
            ]>["author"]>, options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Post | null, Post> & {
            title: <T = Post | null>(title: Post["title"], options?: Record<string, unknown>) => Promise<T>;
            author: <T = Post | null>(author: Post["author"] | Partial<Post<[
                "author"
            ]>["author"]>, options?: Record<string, unknown>) => Promise<T>;
        };
    }
    namespace Plural {
        type AfterQuery = Utils.AfterQuery<Posts>;
        type AfterQueryPromise = Utils.AfterQueryPromise<Posts>;
        type BeforeQuery = Utils.BeforeQuery<Posts>;
        type BeforeQueryPromise = Utils.BeforeQueryPromise<Posts>;
        type IncludingQuery = Utils.IncludingQuery<Posts>;
        type IncludingQueryPromise = Utils.IncludingQueryPromise<Posts>;
        type LimitedToQuery = Utils.LimitedToQuery<Posts>;
        type LimitedToQueryPromise = Utils.LimitedToQueryPromise<Posts>;
        type OrderedByQuery = Utils.OrderedByQuery<Posts, Post.FieldSlug>;
        type OrderedByQueryPromise = Utils.OrderedByQueryPromise<Posts, Post.FieldSlug>;
        type RootQueryCaller = Utils.RootQueryCaller<Posts>;
        type RootQueryCallerPromise = Utils.RootQueryCallerPromise<Posts>;
        type SelectingQuery = Utils.SelectingQuery<Posts, Post.FieldSlug>;
        type SelectingQueryPromise = Utils.SelectingQueryPromise<Posts, Post.FieldSlug>;
        type ToQuery = Utils.ToQuery<Posts, Post>;
        type ToQueryPromise = Utils.ToQueryPromise<Posts, Post>;
        type UsingQuery = ReducedFunction & {
            <U extends Array<"author"> | "all">(fields: U): Post<U>;
            <T = Posts>(fields: Array<"author"> | "all"): T;
        };
        type UsingQueryPromise = ReducedFunction & {
            <U extends Array<"author"> | "all">(fields: U): Promise<Post<U>>;
            <T = Posts>(fields: Array<"author"> | "all"): Promise<T>;
        };
        type WithQuery = Utils.WithQuery<Posts, Post> & {
            title: <T = Posts>(title: Post["title"], options?: Record<string, unknown>) => T;
            author: <T = Posts>(author: Post["author"] | Partial<Post<[
                "author"
            ]>["author"]>, options?: Record<string, unknown>) => T;
        };
        type WithQueryPromise = Utils.WithQueryPromise<Posts, Post> & {
            title: <T = Posts>(title: Post["title"], options?: Record<string, unknown>) => Promise<T>;
            author: <T = Posts>(author: Post["author"] | Partial<Post<[
                "author"
            ]>["author"]>, options?: Record<string, unknown>) => Promise<T>;
        };
    }
}
"
`;

exports[`namespaces with no models 1`] = `
"type AddQuery = {};
type GetQuery = {};
type RemoveQuery = {};
type SetQuery = {};
"
`;
