// Bun Snapshot v1, https://bun.sh/docs/test/snapshots

exports[`model a basic model 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
export type Account = Utils.ResultRecord & {
    avatar: StoredObject;
    email: string;
    isActive: boolean;
    lastActiveAt: Date;
    name: string;
    rewardPoints: number;
    settings: (JsonObject | JsonArray);
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with a summary 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
/**
 * A user account.
 */
export type Account = Utils.ResultRecord & {
    email: string;
    name: string;
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with an invalid field type 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
export type Account = Utils.ResultRecord & {
    name: unknown;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with a link field 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
export type Account = Utils.ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Post<U extends Array<"author"> | "all" = [
]> = Utils.ResultRecord & {
    author: Utils.ResolveSchema<Account, U, "author">;
    title: string;
};
export type Posts<U extends Array<"author"> | "all" = [
]> = Array<Post<U>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with a many-to-many link field 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
export type Account = Utils.ResultRecord & {
    email: string;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
export type Space<U extends Array<"members"> | "all" = [
]> = Utils.ResultRecord & {
    members: Utils.ResolveSchema<Array<Account>, U, "members">;
    name: string;
};
export type Spaces<U extends Array<"members"> | "all" = [
]> = Array<Space<U>> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with a link field that does not exist 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
export type Account = Utils.ResultRecord & {
    email: string;
    latestPost: unknown;
    name: string;
};
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;

exports[`model a model with nested fields 1`] = `
"export interface TriggerOptions {
    client: {
        add: Syntax.AddQuery;
        get: Syntax.GetQuery;
        remove: Syntax.RemoveQuery;
        set: Syntax.SetQuery;
    };
}
/**
 * A user account.
 */
export type Account = Utils.ResultRecord & {
    name: string;
    nested: {
        bar: number;
        foo: string;
    };
};
/**
 * A user account.
 */
export type Accounts = Array<Account> & {
    moreBefore?: string;
    moreAfter?: string;
};
"
`;
