import type { BeforeGetTrigger, QueryHandlerOptions } from 'blade-client/types';
import type { Model } from 'blade-compiler';
import { schema, triggers } from 'server-list';

import type { ServerContext } from '@/private/server/context';
import type {
  ClientTriggerOptions,
  TriggerOptions as NewTriggerOptions,
  Triggers,
} from '@/private/server/types';
import { WRITE_QUERY_TYPES } from '@/private/server/utils/constants';
import { getCookieSetter } from '@/private/universal/utils';

const models: Array<Model> = Object.values(schema['index.ts'] || {});

/**
 * Convert a list of trigger files to triggers that can be passed to RONIN.
 *
 * @param serverContext - A server context object.
 * @param headless - Whether the triggers are being run for a headless source, meaning
 * the application's browser client or REST API. If queries from multiple different
 * sources are provided, this argument should be omitted.
 *
 * @returns Triggers ready to be passed to RONIN.
 */
export const getClientConfig = (
  serverContext: ServerContext,
  requireTriggers: 'all' | 'write' | 'none',
): QueryHandlerOptions => {
  const options: Partial<NewTriggerOptions> = {
    cookies: serverContext.cookies,
    setCookie: getCookieSetter(serverContext),
    navigator: {
      userAgent: serverContext.userAgent,
      geoLocation: serverContext.geoLocation,
      languages: serverContext.languages,
    },
    location: new URL(serverContext.url),
    flushSession: serverContext.flushSession,
  };

  const list = Object.entries(triggers || {}).map(
    ([fileName, triggerList]): [string, Triggers] => {
      // For every trigger, update the existing options argument to provide additional
      // options that are specific to BLADE.
      const extendedTriggerEntries = Object.entries(triggerList).map(
        ([triggerName, triggerFunction]) => [
          triggerName,
          // This handles triggers of all types, but for the sake of being able to parse
          // the arguments of the original trigger type, we're using only the type of
          // `before*` triggers.
          (...args: Parameters<BeforeGetTrigger>) => {
            const argsBeforeLast = args.slice(0, -1);
            const oldOptions = args.at(-1) as ClientTriggerOptions;

            // Create an object of options that are specific to the current trigger
            // function, in order to avoid modifying the global object.
            const newOptions: Partial<NewTriggerOptions> = { ...options };

            if (requireTriggers === 'all') {
              // If all queries provided to the triggers stem from the same data source,
              // we can explicitly set the headless property to `true` or `false`.
              newOptions.headless = true;
            } else {
              const triggerNameSlug = triggerName.toLowerCase();

              // If the client informs us that the query was generated by a trigger, we
              // don't need to perform further checks, because it is guaranteed that the
              // query is not headless.
              //
              // Otherwise, if the client does not provide us with such information, we
              // need to check if the query is headless based on Blade's own primitives.
              if (oldOptions.parentTrigger) {
                newOptions.headless = false;
              } else {
                // If the queries stem from multiple different data sources, the type of
                // query that is being executed determines whether it stems from a
                // headless source, or not.
                //
                // Specifically, read queries are never headless because they always stem
                // from the server (where the database is located), whereas write queries
                // are always headless because they always stem from the client (where the
                // user expressing the intent is located). The only exception to this rule
                // is handled above, if `headless` is defined explicitly.
                newOptions.headless = WRITE_QUERY_TYPES.some((queryType) => {
                  return triggerNameSlug.endsWith(queryType);
                });
              }
            }

            const finalArgs = [...argsBeforeLast, { ...oldOptions, ...newOptions }];

            return triggerFunction(...finalArgs);
          },
        ],
      );

      return [fileName.replace('.ts', ''), Object.fromEntries(extendedTriggerEntries)];
    },
  );

  const finalTriggers = Object.fromEntries(list);

  return {
    triggers: finalTriggers,
    requireTriggers: requireTriggers === 'none' ? undefined : requireTriggers,
    waitUntil: serverContext.waitUntil,
    models,
    defaultRecordLimit: 20,
  };
};
